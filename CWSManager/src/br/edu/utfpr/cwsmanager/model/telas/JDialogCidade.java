/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package br.edu.utfpr.cwsmanager.model.telas;

import br.edu.utfpr.cwsmanager.model.daos.DaoGenerics;
import br.edu.utfpr.cwsmanager.model.daos.TransactionManager;
import br.edu.utfpr.cwsmanager.model.endereco.Cidade;
import java.awt.Color;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.border.LineBorder;

/**
 *
 * @author EduardoGreco
 */
public class JDialogCidade extends javax.swing.JDialog {

    private Cidade cidade;

    /**
     * Creates new form JDialogCidade
     */
    public JDialogCidade(java.awt.Dialog parent, boolean modal) {
        super(parent, modal);
        initComponents();

        habilitaCampos(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabelCodCidade = new javax.swing.JLabel();
        jLabelNomeCidade = new javax.swing.JLabel();
        jLabelEstadoCidade = new javax.swing.JLabel();
        jTextFieldIdCidade = new javax.swing.JTextField();
        jTextFieldNomeCidade = new javax.swing.JTextField();
        jButtonPesquisarCidade = new javax.swing.JButton();
        jComboBoxEstadoCidade = new javax.swing.JComboBox();
        jButtonIncluirCidade = new javax.swing.JButton();
        jButtonAlterarCidade = new javax.swing.JButton();
        jButtonExcluirCidade = new javax.swing.JButton();
        jButtonGravarCidade = new javax.swing.JButton();
        jButtonCancelarCidade = new javax.swing.JButton();
        jButtonSairCidade = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Cadastro de Cidades");

        jLabelCodCidade.setText("Código:");

        jLabelNomeCidade.setText("Nome:*");

        jLabelEstadoCidade.setText("Estado:*");

        jTextFieldIdCidade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldIdCidadeActionPerformed(evt);
            }
        });

        jTextFieldNomeCidade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldNomeCidadeActionPerformed(evt);
            }
        });

        jButtonPesquisarCidade.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/pesquisa.png"))); // NOI18N
        jButtonPesquisarCidade.setToolTipText("Pesquisar Cliente");
        jButtonPesquisarCidade.setMaximumSize(new java.awt.Dimension(42, 28));
        jButtonPesquisarCidade.setMinimumSize(new java.awt.Dimension(42, 28));
        jButtonPesquisarCidade.setPreferredSize(new java.awt.Dimension(42, 28));
        jButtonPesquisarCidade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPesquisarCidadeActionPerformed(evt);
            }
        });

        jComboBoxEstadoCidade.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Acre", "Alagoas", "Amapá", "Amazonas", "Bahia", "Ceará", "Distrito Federal", "Espírito Santo", "Goiás", "Maranhão", "Minas Gerais", "Mato Grosso do Sul", "Mato Grosso", "Pará", "Paraíba", "Pernambuco", "Piauí", "Paraná", "Rio de Janeiro", "Rio Grande do Norte", "Rio Grande do Sul", "Rondônia", "Roraima", "Santa Catarina", "Sergipe", "São Paulo", "Tocantins" }));

        jButtonIncluirCidade.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/incluir.png"))); // NOI18N
        jButtonIncluirCidade.setText("Incluir");
        jButtonIncluirCidade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonIncluirCidadeActionPerformed(evt);
            }
        });

        jButtonAlterarCidade.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/alterar.png"))); // NOI18N
        jButtonAlterarCidade.setText("Alterar");
        jButtonAlterarCidade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAlterarCidadeActionPerformed(evt);
            }
        });

        jButtonExcluirCidade.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/excluir.png"))); // NOI18N
        jButtonExcluirCidade.setText("Exluir");
        jButtonExcluirCidade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExcluirCidadeActionPerformed(evt);
            }
        });

        jButtonGravarCidade.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/gravar.png"))); // NOI18N
        jButtonGravarCidade.setText("Gravar");
        jButtonGravarCidade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGravarCidadeActionPerformed(evt);
            }
        });

        jButtonCancelarCidade.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/cancelar.png"))); // NOI18N
        jButtonCancelarCidade.setText("Cancelar");
        jButtonCancelarCidade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelarCidadeActionPerformed(evt);
            }
        });

        jButtonSairCidade.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/remove.png"))); // NOI18N
        jButtonSairCidade.setText("Sair");
        jButtonSairCidade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSairCidadeActionPerformed(evt);
            }
        });

        jLabel3.setText("* Campos Obrigatórios");

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(8, 8, 8)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabelCodCidade)
                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                        .add(jLabelNomeCidade)
                                        .add(jLabelEstadoCidade)))
                                .add(18, 18, 18)
                                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jPanel1Layout.createSequentialGroup()
                                        .add(jTextFieldIdCidade, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 61, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                        .add(jButtonPesquisarCidade, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 40, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                    .add(jComboBoxEstadoCidade, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 180, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(jTextFieldNomeCidade, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 264, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                            .add(jLabel3))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jButtonIncluirCidade)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jButtonAlterarCidade)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jButtonExcluirCidade)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 100, Short.MAX_VALUE)
                        .add(jButtonGravarCidade, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 88, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jButtonCancelarCidade, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 101, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(20, 20, 20)))
                .add(jButtonSairCidade, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 87, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(21, 21, 21)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(jLabelCodCidade)
                        .add(jTextFieldIdCidade, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jButtonPesquisarCidade, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 30, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jTextFieldNomeCidade, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabelNomeCidade))
                .add(19, 19, 19)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jComboBoxEstadoCidade, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabelEstadoCidade))
                .add(18, 18, 18)
                .add(jLabel3)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 24, Short.MAX_VALUE)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jButtonIncluirCidade, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 34, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jButtonAlterarCidade, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 34, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jButtonExcluirCidade, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 36, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jButtonGravarCidade, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 37, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jButtonCancelarCidade, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 37, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jButtonSairCidade, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 37, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextFieldNomeCidadeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldNomeCidadeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldNomeCidadeActionPerformed

    private void jButtonPesquisarCidadeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPesquisarCidadeActionPerformed
        final JDialogConsCidade consulta = new JDialogConsCidade(this, true);
        consulta.setLocationRelativeTo(consulta);
        consulta.setVisible(true);

        consulta.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                cidade = consulta.cidade;
                try {
                    //  cliente = DaoCliente.retrieve(cliente.getId());
                    cidade = new DaoGenerics<Cidade>(Cidade.class).retrieve(cidade.getId());
                } catch (Exception ex) {
                    Logger.getLogger(JDialogCidade.class.getName()).log(Level.SEVERE, null, ex);
                }
                setCidade(cidade);

                jButtonAlterarCidade.setEnabled(true);
                jButtonExcluirCidade.setEnabled(true);
                jButtonIncluirCidade.setEnabled(true);

                jButtonCancelarCidade.setEnabled(true);
                jButtonGravarCidade.setEnabled(false);

                jTextFieldIdCidade.setEnabled(false);
                jButtonPesquisarCidade.setEnabled(true);
                jTextFieldNomeCidade.setEnabled(false);
                jComboBoxEstadoCidade.setEnabled(false);
            }
        });

    }//GEN-LAST:event_jButtonPesquisarCidadeActionPerformed

    private void jButtonAlterarCidadeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAlterarCidadeActionPerformed
        jButtonAlterarCidade.setEnabled(false);
        jButtonExcluirCidade.setEnabled(true);
        jButtonIncluirCidade.setEnabled(false);

        jButtonCancelarCidade.setEnabled(true);
        jButtonGravarCidade.setEnabled(true);

        jTextFieldIdCidade.setEnabled(false);
        jButtonPesquisarCidade.setEnabled(false);
        jTextFieldNomeCidade.setEnabled(true);
        jComboBoxEstadoCidade.setEnabled(true);
    }//GEN-LAST:event_jButtonAlterarCidadeActionPerformed

    private void jButtonExcluirCidadeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExcluirCidadeActionPerformed
        String[] opcoes = {"Sim", "Não"};
        int opcao = JOptionPane.showOptionDialog(null, "Tem certeza que deseja excluir?", "Confirmação",
                JOptionPane.YES_OPTION, JOptionPane.QUESTION_MESSAGE, null, opcoes, opcoes[1]);

        if (JOptionPane.OK_OPTION == opcao) {
            try {
                DaoGenerics<Cidade> daoCidade = new DaoGenerics<>(Cidade.class);
                cidade = null;
                cidade = daoCidade.retrieve(Integer.parseInt(jTextFieldIdCidade.getText().trim()));
                TransactionManager.beginTransaction();
                daoCidade.delete(cidade);
                TransactionManager.commit();
            } catch (Exception ex) {
                Logger.getLogger(JDialogCidade.class.getName()).log(Level.SEVERE, null, ex);
            }
            JOptionPane.showMessageDialog(null, "O registro foi excluido com sucesso!", "Mensagem", JOptionPane.INFORMATION_MESSAGE);
        }

        clearCampos();
    }//GEN-LAST:event_jButtonExcluirCidadeActionPerformed

    private void jButtonIncluirCidadeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonIncluirCidadeActionPerformed
        clearCampos();
        habilitaCampos(false);
    }//GEN-LAST:event_jButtonIncluirCidadeActionPerformed

    private void jButtonSairCidadeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSairCidadeActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_jButtonSairCidadeActionPerformed

    private void jButtonGravarCidadeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGravarCidadeActionPerformed
        if (!validaCampos()) {
            return;
        }
        try {
            gravar();
        } catch (Exception ex) {
            Logger.getLogger(JDialogCidade.class.getName()).log(Level.SEVERE, null, ex);
        }
        JOptionPane.showMessageDialog(null, "Registro gravado com sucesso.", "Gravar", JOptionPane.INFORMATION_MESSAGE);
       clearCampos();
        habilitaCampos(true);
        jButtonPesquisarCidade.setEnabled(true);
    }//GEN-LAST:event_jButtonGravarCidadeActionPerformed

    private void jButtonCancelarCidadeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelarCidadeActionPerformed
        habilitaCampos(false);
        clearCampos();        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonCancelarCidadeActionPerformed

    private void jTextFieldIdCidadeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldIdCidadeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldIdCidadeActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JDialogCidade.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JDialogCidade.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JDialogCidade.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JDialogCidade.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                JDialogCidade dialog = new JDialogCidade(new javax.swing.JDialog(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAlterarCidade;
    private javax.swing.JButton jButtonCancelarCidade;
    private javax.swing.JButton jButtonExcluirCidade;
    private javax.swing.JButton jButtonGravarCidade;
    private javax.swing.JButton jButtonIncluirCidade;
    private javax.swing.JButton jButtonPesquisarCidade;
    private javax.swing.JButton jButtonSairCidade;
    private javax.swing.JComboBox jComboBoxEstadoCidade;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabelCodCidade;
    private javax.swing.JLabel jLabelEstadoCidade;
    private javax.swing.JLabel jLabelNomeCidade;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField jTextFieldIdCidade;
    private javax.swing.JTextField jTextFieldNomeCidade;
    // End of variables declaration//GEN-END:variables

    public void gravar() throws Exception {
        cidade = null;

        if (jTextFieldIdCidade.getText().isEmpty()) {
            cidade = new Cidade();
        } else {
            cidade = new DaoGenerics<Cidade>(Cidade.class).retrieve(Integer.parseInt(jTextFieldIdCidade.getText().trim()));
        }

        TransactionManager.beginTransaction();
        cidade.setNome(jTextFieldNomeCidade.getText().trim());
        cidade.setEstado(jComboBoxEstadoCidade.getSelectedItem().toString());
        new DaoGenerics<Cidade>(Cidade.class).persist(cidade);
        TransactionManager.commit();

    }

    private void setCidade(Cidade cidade) {
        jTextFieldIdCidade.setText(Integer.toString(cidade.getId()));
        jTextFieldNomeCidade.setText(cidade.getNome());
        jComboBoxEstadoCidade.setSelectedItem(cidade.getEstado());
    }

    private void clearCampos() {
        jTextFieldIdCidade.setText("");
        jTextFieldNomeCidade.setText("");

    }

    private void habilitaCampos(boolean comando) {
        jButtonAlterarCidade.setEnabled(comando);
        jButtonExcluirCidade.setEnabled(comando);
        jButtonIncluirCidade.setEnabled(comando);

        jButtonCancelarCidade.setEnabled(comando);
        jButtonGravarCidade.setEnabled(!comando);

        jTextFieldIdCidade.setEnabled(comando);
        jButtonPesquisarCidade.setEnabled(!comando);
        jTextFieldNomeCidade.setEnabled(!comando);
        jComboBoxEstadoCidade.setEnabled(!comando);
    }

   private boolean validaCampos() {
        StringBuilder msgs = new StringBuilder();

        if (jTextFieldNomeCidade.getText().isEmpty()) {
            msgs.append("Nome da Cidade é Obrigatório!\n");
            jTextFieldNomeCidade.grabFocus();
            jTextFieldNomeCidade.setBorder(new LineBorder(Color.red));
        }
      
        if (msgs.length() > 0) {
            JOptionPane.showMessageDialog(null, msgs.toString(), "Atençao!", JOptionPane.WARNING_MESSAGE);
            return false;
        }
        return true;
    }
}
